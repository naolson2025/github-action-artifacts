# job artifacts are the production assets created by the build job
# we can download these artifacts and use in other jobs via action
name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # we can cache dependencies across all jobs
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # will be used to create a unique key for the cache
          # we hash the package-lock.json file because it contains the exact version of each dependency
          # if the dependencies change, the hash will change, and the cache will be invalidated
          key: deps-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
    outputs:
      # script-file is not a keyword, name whatever you want
      # .publish is the id of the step that outputs the script-file
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # need to add the cache to all jobs that install depenedencies
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
        # example of providing an output from one job to another
        # we can use this output in other jobs
        # in this case, we want to provide the name of the production JS file
        # since this production JS file is created in the build job
        # is has a random name
      - name: Publish JS filename
        id: publish
        # this is a regular linx command to find the name of the production JS file
        # script-file is the chosen name of the output (needs to match above)
        # $GITHUB_OUTPUT is a special variable that is used to pass the output to other jobs
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # we can upload the artifacts to the github server
        # which means we can download them in other jobs
        # we can also manually download them by navigating to the actions tab in github
        # in this case, we are uploading the dist folder
        # which contains the production assets
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          # can specify multiple paths here
          path: dist
  # here in the deploy job we want to access the production assets
  # from the build job, but since each job runs in a separate container
  # we need to download the artifacts from the build job
  deploy:
    # deploy must run after build, because we need the production assests
    # from the build job
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          # the name of the artifact we want to download
          # should have the same name as the upload artifact step in the build job
          name: dist-files
          path: dist
        # for testing purposes, we can output the contents of the dist folder
      - name: output dist folder
        run: ls dist
      - name: Output filename
        # we can access the output from the build job
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
